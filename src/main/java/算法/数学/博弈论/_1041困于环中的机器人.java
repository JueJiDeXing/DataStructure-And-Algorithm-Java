package 算法.数学.博弈论;

/**
 第 136 场周赛 Q1
 难度分:1521
 */
public class _1041困于环中的机器人 {
    /*
    在无限的平面上，机器人最初位于 (0, 0) 处，面朝北方。注意:

    北方向 是y轴的正方向。
    南方向 是y轴的负方向。
    东方向 是x轴的正方向。
    西方向 是x轴的负方向。
    机器人可以接受下列三条指令之一：

    "G"：直走 1 个单位
    "L"：左转 90 度
    "R"：右转 90 度
    机器人按顺序执行指令 instructions，并一直重复它们。

    只有在平面中存在环使得机器人永远无法离开时，返回 true。否则，返回 false。
     */

    /**
     初始方向为北,坐标(0,0)
     对执行一轮指令后的情况进行分类讨论
     假设一轮指令后,机器人到达(x,y),方向为d
     case1: (x,y)==(0,0) 机器人还停留在原地,无论机器人方向如何,机器人无法离开平面
     case2: (x,y)!=(0,0) && d=='北' 那么机器人会沿着北方离开平面
     case3: (x,y)!=(0,0) && d!='北'
     如果d=='南', 那么下一轮指令机器人会移动相反的位移,最终位置(x`,y`)==(x-x,y-y)==(0,0),而方向d`会再次翻转为北,回到初始状态,机器人无法离开
     如果d=='东'或'西',那么下下轮指令会朝向南,与北的指令抵消,东和西的指令也相互抵消,所以每4轮指令都会回到初始状态,无法离开平面
     */
    public boolean isRobotBounded(String instructions) {
        //计算一轮指令后的状态
        int[][] direct = new int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int dir = 0;//0:北,1:东,2:南,3:西
        int x = 0, y = 0;
        for (char ch : instructions.toCharArray()) {
            if (ch == 'G') {
                x += direct[dir][0];
                y += direct[dir][1];
            } else if (ch == 'L') {
                dir--;
                if (dir < 0) dir = 3;
            } else {
                dir++;
                if (dir > 3) dir = 0;
            }
        }
        //必须移动,且方向不变才能离开平面
        return (x == 0 && y == 0) || dir != 0;
    }
}
